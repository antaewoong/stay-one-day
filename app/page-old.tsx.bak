'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { 
  CalendarDays, 
  MapPin, 
  Users, 
  Clock, 
  Star, 
  Shield, 
  Heart,
  Search,
  TrendingUp,
  Award,
  Zap,
  ArrowRight,
  PlayCircle,
  ChevronDown,
  Filter,
  Grid3X3,
  List,
  SlidersHorizontal,
  Home,
  Share2,
  Waves,
  X
} from 'lucide-react'
import Link from 'next/link'
import { useState, useEffect } from 'react'
import Header from '@/components/header'
import { createClient } from '@/lib/supabase/client'

export default function HomePage() {
  const [currentSlide, setCurrentSlide] = useState(0)
  const [selectedCategory, setSelectedCategory] = useState('전체')
  const [viewMode, setViewMode] = useState('grid')
  const [searchQuery, setSearchQuery] = useState('')
  const [showFilters, setShowFilters] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [currentSuggestionIndex, setCurrentSuggestionIndex] = useState(0)
  const [suggestions, setSuggestions] = useState(['풀빌라', '청주', '세종', '대전', '천안', '애견풀빌라'])
  const [showSearchModal, setShowSearchModal] = useState(false)
  const [searchLocation, setSearchLocation] = useState('')
  const [selectedDate, setSelectedDate] = useState('')
  const [guestCount, setGuestCount] = useState(2)
  const [user, setUser] = useState<any>(null)
  const [isUserLoading, setIsUserLoading] = useState(true)
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false)
  const [isUserMenuClosing, setIsUserMenuClosing] = useState(false)
  
  // 슬라이드 드래그 관련 state
  const [isDragging, setIsDragging] = useState(false)
  const [startX, setStartX] = useState(0)
  const [currentX, setCurrentX] = useState(0)
  const [slideOffset, setSlideOffset] = useState(0)
  
  const [heroSlides, setHeroSlides] = useState([
    {
      id: 1,
      title: "stayoneday",
      subtitle: "특별한 하루를 위한 프리미엄 공간",
      description: "구공스테이와 함께하는 특별한 당일여행 경험",
      image: "/images/stays/구공스테이 광덕.jpeg",
      cta: "지금 발견하기",
      badge: "혁신적인 플랫폼",
      stats: { properties: "200+", cities: "전국", satisfaction: "98%" }
    },
    {
      id: 2,
      title: "구공스테이 광덕",
      subtitle: "자연 속 힐링 공간",
      description: "춘천의 아름다운 자연과 함께하는 프라이빗한 독채 스테이",
      image: "/images/stays/구공스테이 광덕.jpeg",
      cta: "광덕 보러가기",
      badge: "자연 힐링",
      stats: { avgRating: "4.9", bookings: "1,200+", type: "독채" }
    },
    {
      id: 3,
      title: "구공스테이 본디",
      subtitle: "제주도의 특별한 매력",
      description: "오션뷰와 함께 제주만의 독특한 감성을 느낄 수 있는 공간",
      image: "/images/stays/구공스테이 본디.jpeg",
      cta: "제주 보러가기",
      badge: "오션뷰",
      stats: { location: "제주도", capacity: "10명", reviews: "800+" }
    },
    {
      id: 4,
      title: "구공스테이 사사담 사이",
      subtitle: "한옥의 전통미",
      description: "한옥의 정취와 현대적 편의시설이 조화를 이룬 특별한 공간",
      image: "/images/stays/구공스테이 사사담 사이.jpeg",
      cta: "한옥 보러가기",
      badge: "전통미",
      stats: { style: "한옥", heritage: "전통", comfort: "모던" }
    },
    {
      id: 5,
      title: "구공스테이 소소한옥",
      subtitle: "소소하지만 특별한",
      description: "경주의 역사와 함께하는 아늑한 한옥 스테이",
      image: "/images/stays/구공스테이 소소한옥.jpeg",
      cta: "경주 보러가기",
      badge: "역사도시",
      stats: { city: "경주", rooms: "2실", guests: "6명" }
    },
    {
      id: 6,
      title: "구공스테이 하루여백",
      subtitle: "바쁜 일상의 여백",
      description: "평창의 맑은 공기와 함께하는 힐링 타임",
      image: "/images/stays/구공스테이 하루여백.jpeg",
      cta: "평창 보러가기",
      badge: "힐링",
      stats: { location: "평창", air: "청정", mood: "힐링" }
    },
    {
      id: 7,
      title: "글로우 스테이",
      subtitle: "도심 속 모던함",
      description: "강남의 세련된 분위기를 담은 모던 스테이",
      image: "/images/stays/글로우.jpeg",
      cta: "강남 보러가기",
      badge: "모던",
      stats: { area: "강남구", style: "모던", access: "편리" }
    },
    {
      id: 8,
      title: "라구스힐",
      subtitle: "언덕 위의 특별한 뷰",
      description: "가평의 아름다운 전망을 담은 힐탑 스테이",
      image: "/images/stays/라구스힐.jpeg",
      cta: "가평 보러가기",
      badge: "전망 좋은",
      stats: { view: "파노라마", location: "가평", rooms: "3실" }
    },
    {
      id: 9,
      title: "마담아네뜨",
      subtitle: "프렌치 감성",
      description: "파주 헤이리의 우아한 프렌치 감성 스테이",
      image: "/images/stays/마담아네뜨.png",
      cta: "헤이리 보러가기",
      badge: "프렌치",
      stats: { style: "프렌치", area: "헤이리", mood: "로맨틱" }
    },
    {
      id: 10,
      title: "스테이도고",
      subtitle: "부산의 도심 힐링",
      description: "해운대 근처 편리한 위치의 모던 스테이",
      image: "/images/stays/스테이도고.jpeg",
      cta: "부산 보러가기",
      badge: "도심형",
      stats: { city: "부산", beach: "해운대", access: "편리" }
    }
  ])
  
  const supabase = createClient()

  // 사용자 인증 상태 확인
  useEffect(() => {
    const getUser = async () => {
      setIsUserLoading(true)
      try {
        const { data: { user }, error } = await supabase.auth.getUser()
        if (error) {
          console.error('사용자 정보 가져오기 실패:', error)
          setUser(null)
        } else {
          setUser(user)
        }
      } catch (error) {
        console.error('인증 확인 중 오류:', error)
        setUser(null)
      } finally {
        setIsUserLoading(false)
      }
    }

    getUser()

    // 인증 상태 변화 감지
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('인증 상태 변화:', event, session?.user?.email)
        setUser(session?.user ?? null)
        setIsUserLoading(false)
      }
    )

    return () => subscription.unsubscribe()
  }, [])

  // 사이드바 닫기 함수
  const closeUserMenu = () => {
    setIsUserMenuClosing(true)
    setTimeout(() => {
      setIsUserMenuOpen(false)
      setIsUserMenuClosing(false)
    }, 300) // 애니메이션 시간과 맞춤
  }

  // 로그아웃 처리
  const handleSignOut = async () => {
    try {
      const { error } = await supabase.auth.signOut()
      if (error) {
        console.error('로그아웃 실패:', error)
      } else {
        setUser(null)
        closeUserMenu()
      }
    } catch (error) {
      console.error('로그아웃 중 오류:', error)
    }
  }

  // 클릭 외부 감지
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element
      if (isUserMenuOpen && !target.closest('[data-user-menu]')) {
        setIsUserMenuOpen(false)
      }
    }

    document.addEventListener('click', handleClickOutside)
    return () => document.removeEventListener('click', handleClickOutside)
  }, [isUserMenuOpen])


  // 카테고리 데이터 (기존 프로젝트 카테고리 반영)
  const categories = [
    { id: 'all', name: '전체', count: 1200, color: 'bg-gray-900 text-white', icon: Grid3X3 },
    { id: 'recommended', name: '추천', count: 89, color: 'bg-gray-800 text-white', icon: Award },
    { id: 'poolvilla', name: '풀빌라', count: 245, color: 'bg-gray-700 text-white', icon: Zap },
    { id: 'private', name: '독채형', count: 189, color: 'bg-gray-600 text-white', icon: Shield },
    { id: 'trending', name: '인기급상승', count: 67, color: 'bg-gray-800 text-white', icon: TrendingUp },
    { id: 'pet', name: '반려견동반', count: 156, color: 'bg-gray-700 text-white', icon: Heart }
  ]

  // 관리자 설정 검색어 불러오기
  const loadSearchSuggestions = async () => {
    try {
      // 실제로는 관리자 설정 테이블에서 가져올 예정
      // 현재는 localStorage를 임시로 사용
      if (typeof window !== 'undefined') {
        const adminSuggestions = localStorage.getItem('adminSearchSuggestions')
        if (adminSuggestions) {
          const parsedSuggestions = JSON.parse(adminSuggestions)
          console.log('로드된 검색어:', parsedSuggestions)
          setSuggestions(parsedSuggestions)
        } else {
          console.log('저장된 검색어 없음, 기본값 사용')
        }
      }
    } catch (error) {
      console.error('검색어 로드 실패:', error)
    }
  }

  // 자동 슬라이드 전환 (드래그 중이 아닐 때만)
  useEffect(() => {
    if (isDragging) return // 드래그 중일 때는 자동 전환 중지
    
    const interval = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % heroSlides.length)
    }, 6000)

    return () => clearInterval(interval)
  }, [heroSlides.length, isDragging])

  // 마우스/터치 드래그 핸들러
  const handleDragStart = (clientX: number) => {
    setIsDragging(true)
    setStartX(clientX)
    setCurrentX(clientX)
    setSlideOffset(0)
  }

  const handleDragMove = (clientX: number) => {
    if (!isDragging) return
    
    setCurrentX(clientX)
    const diff = clientX - startX
    setSlideOffset(diff)
  }

  const handleDragEnd = () => {
    if (!isDragging) return
    
    const diff = currentX - startX
    const threshold = 50 // 최소 드래그 거리

    if (Math.abs(diff) > threshold) {
      if (diff > 0) {
        // 오른쪽으로 드래그 - 이전 슬라이드
        setCurrentSlide((prev) => (prev - 1 + heroSlides.length) % heroSlides.length)
      } else {
        // 왼쪽으로 드래그 - 다음 슬라이드
        setCurrentSlide((prev) => (prev + 1) % heroSlides.length)
      }
    }

    setIsDragging(false)
    setSlideOffset(0)
    setStartX(0)
    setCurrentX(0)
  }

  // 마우스 이벤트 핸들러
  const handleMouseDown = (e: React.MouseEvent) => {
    e.preventDefault()
    handleDragStart(e.clientX)
  }

  const handleMouseMove = (e: React.MouseEvent) => {
    e.preventDefault()
    handleDragMove(e.clientX)
  }

  const handleMouseUp = (e: React.MouseEvent) => {
    e.preventDefault()
    handleDragEnd()
  }

  const handleMouseLeave = (e: React.MouseEvent) => {
    if (isDragging) {
      handleDragEnd()
    }
  }

  // 터치 이벤트 핸들러
  const handleTouchStart = (e: React.TouchEvent) => {
    handleDragStart(e.touches[0].clientX)
  }

  const handleTouchMove = (e: React.TouchEvent) => {
    handleDragMove(e.touches[0].clientX)
  }

  const handleTouchEnd = (e: React.TouchEvent) => {
    handleDragEnd()
  }

  // 전역 마우스 이벤트 (마우스가 컨테이너 밖으로 나가도 드래그 계속)
  useEffect(() => {
    if (!isDragging) return

    const handleGlobalMouseMove = (e: MouseEvent) => {
      handleDragMove(e.clientX)
    }

    const handleGlobalMouseUp = (e: MouseEvent) => {
      handleDragEnd()
    }

    document.addEventListener('mousemove', handleGlobalMouseMove)
    document.addEventListener('mouseup', handleGlobalMouseUp)

    return () => {
      document.removeEventListener('mousemove', handleGlobalMouseMove)
      document.removeEventListener('mouseup', handleGlobalMouseUp)
    }
  }, [isDragging, startX, currentX])

  // 관리자 설정 히어로 슬라이드 로드하기
  const loadAdminHeroSlides = () => {
    try {
      if (typeof window !== 'undefined') {
        const savedSlides = localStorage.getItem('adminHeroSlides')
        if (savedSlides) {
          const parsedSlides = JSON.parse(savedSlides)
          console.log('로드된 관리자 히어로 슬라이드:', parsedSlides)
          if (parsedSlides.length > 0) {
            // 관리자가 설정한 슬라이드가 있으면 기본 슬라이드 대신 사용
            setHeroSlides(parsedSlides)
          }
        } else {
          console.log('저장된 히어로 슬라이드 없음, 기본값 사용')
        }
      }
    } catch (error) {
      console.error('히어로 슬라이드 로드 실패:', error)
    }
  }

  // 로딩 시뮬레이션 & 검색어 로드 & 히어로 슬라이드 로드
  useEffect(() => {
    loadSearchSuggestions()
    loadAdminHeroSlides()
    setTimeout(() => setIsLoading(false), 2000)
  }, [])

  // 추천 검색어 자동 스크롤 (항상 실행)
  useEffect(() => {
    if (!searchQuery && suggestions.length > 0) {
      const interval = setInterval(() => {
        setCurrentSuggestionIndex((prev) => (prev + 1) % suggestions.length)
      }, 2000)
      return () => clearInterval(interval)
    }
  }, [searchQuery, suggestions.length])

  const featuredStays = [
    {
      id: 1,
      name: '구공스테이 청주 메인홀',
      location: '충북 청주시 청원구',
      type: '프라이빗 풀빌라',
      price: 180000,
      originalPrice: 220000,
      image: 'https://images.unsplash.com/photo-1566073771259-6a8506099945?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      rating: 4.9,
      reviews: 147,
      discount: 18,
      tags: ['추천', '풀빌라', 'BBQ'],
      capacity: 20,
      amenities: ['프라이빗 풀', '바베큐 시설', '주차 5대', 'WiFi'],
      isHot: true,
      badges: ['인기 1위', 'SuperHost']
    },
    {
      id: 2,
      name: '스카이뷰 루프탑 펜션',
      location: '경기도 가평군',
      type: '루프탑 독채',
      price: 160000,
      originalPrice: 200000,
      image: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      rating: 4.8,
      reviews: 89,
      discount: 20,
      tags: ['독채형', '뷰맛집', '인스타'],
      capacity: 12,
      amenities: ['루프탑 테라스', '도시뷰', '주방시설', '주차장'],
      isNew: true,
      badges: ['신규 오픈']
    },
    {
      id: 3,
      name: '오션뷰 글램핑',
      location: '강원도 양양군',
      type: '해변 글램핑',
      price: 140000,
      image: 'https://images.unsplash.com/photo-1571896349842-33c89424de2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      rating: 4.7,
      reviews: 234,
      tags: ['글램핑', '바다뷰', '캠핑'],
      capacity: 6,
      amenities: ['오션뷰', '캠프파이어', '바베큐', '샤워시설'],
      badges: ['바다 전망']
    },
    {
      id: 4,
      name: '힐링 포레스트 하우스',
      location: '전남 순천시',
      type: '숲속 독채',
      price: 120000,
      originalPrice: 150000,
      image: 'https://images.unsplash.com/photo-1449824913935-59a10b8d2000?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      rating: 4.6,
      reviews: 78,
      discount: 20,
      tags: ['독채형', '자연', '힐링'],
      capacity: 8,
      amenities: ['숲뷰', '온수 욕조', '주방', '반려견 동반'],
      badges: ['자연 친화']
    },
    {
      id: 5,
      name: '어반 시티 로프트',
      location: '서울시 강남구',
      type: '도심 로프트',
      price: 190000,
      image: 'https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      rating: 4.9,
      reviews: 167,
      tags: ['도심', '교통편리', '비즈니스'],
      capacity: 4,
      amenities: ['지하철 5분', '24시간 체크인', 'WiFi', '업무공간'],
      isHot: true,
      badges: ['교통 편리']
    },
    {
      id: 6,
      name: '팜스테이 힐하우스',
      location: '경북 안동시',
      type: '전통 한옥',
      price: 130000,
      originalPrice: 160000,
      image: 'https://images.unsplash.com/photo-1520637836862-4d197d17c93a?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',
      rating: 4.8,
      reviews: 92,
      discount: 19,
      tags: ['한옥', '전통', '체험'],
      capacity: 10,
      amenities: ['한옥 체험', '농촌 체험', '전통차', '마당'],
      badges: ['전통 문화']
    }
  ]

  if (isLoading) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="relative w-16 h-16 mx-auto mb-8">
            <div className="absolute inset-0 rounded-full border-2 border-gray-200"></div>
            <div className="absolute inset-0 rounded-full border-2 border-gray-900 border-t-transparent animate-spin"></div>
          </div>
          <h2 className="text-2xl font-light text-gray-900 mb-2 tracking-tight">stay<span className="font-medium">oneday</span></h2>
          <p className="text-gray-600">특별한 하루를 준비하고 있습니다...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-white">
      {/* 스테이폴리오 스타일 - 배경 이미지 전체 영역 */}
      <section 
        className="relative h-[60vh] overflow-hidden cursor-grab select-none"
        style={{ cursor: isDragging ? 'grabbing' : 'grab' }}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseLeave}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        {/* 배경 이미지 슬라이더 */}
        <div 
          className="absolute inset-0 transition-transform duration-300 ease-out"
          style={{
            transform: isDragging ? `translateX(${slideOffset}px)` : 'translateX(0px)'
          }}
        >
          {heroSlides.map((slide, index) => (
            <div
              key={slide.id}
              className={`absolute inset-0 transition-all duration-1000 ${
                index === currentSlide ? 'opacity-100 scale-100' : 'opacity-0 scale-105'
              }`}
              style={{
                backgroundImage: `linear-gradient(135deg, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.2)), url('${slide.image}')`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat'
              }}
            >
              {/* 가벼운 오버레이 */}
              <div className="absolute inset-0 bg-black/30"></div>
            </div>
          ))}
        </div>

        {/* 투명 헤더 오버레이 */}
        <div className="absolute top-0 left-0 right-0 z-50">
          <div className="container mx-auto px-4">
            <div className="flex items-center justify-between h-16">
              {/* 왼쪽: 홈 + 로고 */}
              <div className="flex items-center gap-4">
                <Link href="/" className="text-white hover:text-white/80 transition-colors p-2">
                  <Home className="w-5 h-5" />
                </Link>
                <Link href="/" className="text-2xl font-light text-white tracking-tight">
                  stay<span className="font-medium">oneday</span>
                </Link>
              </div>
              
              {/* 오른쪽: 공유하기 + 위시리스트 + 마이페이지 */}
              <div className="flex items-center gap-3">
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="text-white hover:bg-white/10 rounded-full w-10 h-10 p-0"
                  onClick={() => {
                    if (navigator.share) {
                      navigator.share({
                        title: 'Stay One Day',
                        text: '완벽한 당일여행을 위한 숙소 플랫폼',
                        url: window.location.href
                      })
                    } else {
                      navigator.clipboard.writeText(window.location.href)
                      alert('링크가 클립보드에 복사되었습니다!')
                    }
                  }}
                >
                  <Share2 className="w-5 h-5" />
                </Button>
                <Link href="/wishlist">
                  <Button variant="ghost" size="sm" className="text-white hover:bg-white/10 rounded-full w-10 h-10 p-0">
                    <Heart className="w-5 h-5" />
                  </Button>
                </Link>
                <div className="relative" data-user-menu>
                  {isUserLoading ? (
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="text-white hover:bg-white/10 rounded-full w-10 h-10 p-0"
                      disabled
                    >
                      <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                    </Button>
                  ) : user ? (
                    <>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="text-white hover:bg-white/10 rounded-full w-10 h-10 p-0"
                        onClick={() => {
                          console.log('마이페이지 버튼 클릭 - 로그인된 사용자:', user.email)
                          setIsUserMenuOpen(!isUserMenuOpen)
                        }}
                      >
                        <Users className="w-5 h-5" />
                      </Button>
                      {isUserMenuOpen && (
                        <>
                          {/* 백드롭 오버레이 */}
                          <div 
                            className="fixed inset-0 bg-black/30 backdrop-blur-sm z-40 animate-in fade-in duration-300"
                            onClick={() => setIsUserMenuOpen(false)}
                          />
                          
                          {/* 슬라이드 사이드바 */}
                          <div className="fixed top-0 right-0 h-full w-80 bg-white shadow-2xl z-50 animate-in slide-in-from-right duration-300 ease-out">
                            <div className="flex flex-col h-full">
                              {/* 헤더 */}
                              <div className="flex items-center justify-between p-6 border-b border-gray-100">
                                <h2 className="text-lg font-semibold text-gray-900">마이페이지</h2>
                                <button
                                  onClick={() => setIsUserMenuOpen(false)}
                                  className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                                >
                                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                  </svg>
                                </button>
                              </div>

                              {/* 사용자 정보 */}
                              <div className="p-6 border-b border-gray-100">
                                <div className="flex items-center space-x-4">
                                  <div className="w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center">
                                    <Users className="w-6 h-6 text-gray-600" />
                                  </div>
                                  <div>
                                    <p className="text-base font-medium text-gray-900">
                                      {user.user_metadata?.full_name || user.email?.split('@')[0] || '사용자'}
                                    </p>
                                    <p className="text-sm text-gray-500">{user.email}</p>
                                  </div>
                                </div>
                              </div>

                              {/* 메뉴 목록 */}
                              <div className="flex-1 py-6">
                                <nav className="space-y-2 px-6">
                                  <Link 
                                    href="/profile" 
                                    className="flex items-center space-x-3 px-4 py-3 text-gray-700 hover:bg-gray-50 rounded-lg transition-all duration-200 hover:translate-x-1"
                                    onClick={() => setIsUserMenuOpen(false)}
                                  >
                                    <Users className="w-5 h-5" />
                                    <span>프로필</span>
                                  </Link>
                                  <Link 
                                    href="/wishlist" 
                                    className="flex items-center space-x-3 px-4 py-3 text-gray-700 hover:bg-gray-50 rounded-lg transition-all duration-200 hover:translate-x-1"
                                    onClick={() => setIsUserMenuOpen(false)}
                                  >
                                    <Heart className="w-5 h-5" />
                                    <span>위시리스트</span>
                                  </Link>
                                  <Link 
                                    href="/reservations" 
                                    className="flex items-center space-x-3 px-4 py-3 text-gray-700 hover:bg-gray-50 rounded-lg transition-all duration-200 hover:translate-x-1"
                                    onClick={() => setIsUserMenuOpen(false)}
                                  >
                                    <CalendarDays className="w-5 h-5" />
                                    <span>예약 내역</span>
                                  </Link>
                                </nav>
                              </div>

                              {/* 하단 로그아웃 버튼 */}
                              <div className="p-6 border-t border-gray-100">
                                <button
                                  onClick={handleSignOut}
                                  className="flex items-center space-x-3 w-full px-4 py-3 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                                >
                                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                                  </svg>
                                  <span>로그아웃</span>
                                </button>
                              </div>
                            </div>
                          </div>
                        </>
                      )}
                    </>
                  ) : (
                    <Link href="/auth/login">
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="text-white hover:bg-white/10 rounded-full w-10 h-10 p-0"
                        onClick={() => console.log('마이페이지 버튼 클릭 - 로그인 안된 사용자')}
                      >
                        <Users className="w-5 h-5" />
                      </Button>
                    </Link>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* 검색창 오버레이 */}
        <div className="absolute top-16 left-0 right-0 z-40">
          <div className="container mx-auto px-4 py-2">
            <div className="max-w-sm mx-auto">
              <div 
                className="bg-white/95 backdrop-blur-sm border border-white/20 rounded-full shadow-lg p-2 cursor-pointer hover:shadow-xl transition-shadow duration-300"
                onClick={() => setShowSearchModal(true)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1 px-2">
                    <div className="text-base font-medium text-gray-900 h-6 overflow-hidden relative">
                      <div 
                        className="transition-transform duration-500 ease-in-out"
                        style={{
                          transform: `translateY(-${currentSuggestionIndex * 24}px)`
                        }}
                      >
                        {suggestions.map((suggestion, index) => (
                          <div key={index} className="h-6 flex items-center">
                            {searchLocation || suggestion}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                  <div className="bg-red-500 hover:bg-red-600 text-white rounded-full p-2">
                    <Search className="w-4 h-4" />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* 중앙 텍스트 */}
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="text-center text-white px-4 mt-16">
            <h1 className="text-3xl md:text-4xl font-bold mb-2">
              특별한 하루를 위한 완벽한 공간
            </h1>
            <p className="text-lg md:text-xl text-white/90 font-light">
              프리미엄 숙박 경험을 만나보세요
            </p>
          </div>
        </div>

        {/* 슬라이드 인디케이터 */}
        <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-2">
          {heroSlides.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentSlide(index)}
              className={`transition-all duration-300 rounded-full ${
                index === currentSlide 
                  ? 'w-8 h-2 bg-white' 
                  : 'w-2 h-2 bg-white/50 hover:bg-white/75'
              }`}
            />
          ))}
        </div>
      </section>

      {/* 간단한 소개 섹션 */}
      <section className="py-12 bg-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-3">
            엄선된 프리미엄 공간들
          </h2>
          <p className="text-gray-600 max-w-xl mx-auto">
            AI 기반 맞춤 추천으로 완벽한 공간을 발견하세요
          </p>
        </div>
      </section>

      {/* 카테고리별 스테이 섹션들 */}
      
      {/* 추천 스테이 섹션 */}
      <section className="py-12 bg-white">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
                <Award className="w-7 h-7 text-amber-500" />
                추천 스테이
              </h2>
              <p className="text-gray-600">호스트가 직접 추천하는 특별한 공간</p>
            </div>
            <Link href="/spaces" className="text-gray-500 hover:text-gray-900 flex items-center">
              더보기
              <ArrowRight className="w-4 h-4 ml-1" />
            </Link>
          </div>

          <div className="overflow-x-auto -mx-4 mobile-scroll">
            <div className="flex space-x-4 pb-4 pl-4" style={{ width: 'max-content', paddingRight: '40vw' }}>
              {featuredStays.slice(0, 4).map((stay) => (
                <Link key={stay.id} href={`/spaces/${stay.id}`} className="group block flex-shrink-0">
                  <Card className="overflow-hidden border border-gray-200 shadow-sm hover:shadow-2xl transition-all duration-500 bg-white group-hover:-translate-y-2 group-hover:border-gray-300" 
                        style={{ width: '280px', minWidth: '280px' }}>
                    <div className="relative aspect-[4/3] overflow-hidden">
                      {/* 이미지 블러 효과와 지연 로딩 시뮬레이션 */}
                      <div className="absolute inset-0 bg-gray-200 animate-pulse group-hover:hidden"></div>
                      <img 
                        src={stay.image} 
                        alt={stay.name} 
                        className="w-full h-full object-cover group-hover:scale-110 transition-all duration-700 filter group-hover:brightness-110" 
                        loading="lazy"
                      />
                      
                      {/* 프리미엄 오버레이 그라데이션 */}
                      <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                      
                      {/* 배지들 */}
                      <div className="absolute top-3 left-3 flex flex-col gap-2">
                        {stay.discount && (
                          <Badge className="bg-red-500/90 backdrop-blur-sm text-white border-0 shadow-lg font-bold animate-pulse">
                            -{stay.discount}% OFF
                          </Badge>
                        )}
                        {stay.isHot && (
                          <Badge className="bg-orange-500/90 backdrop-blur-sm text-white border-0 shadow-lg">
                            🔥 인기
                          </Badge>
                        )}
                        {stay.isNew && (
                          <Badge className="bg-emerald-500/90 backdrop-blur-sm text-white border-0 shadow-lg">
                            ✨ 신규
                          </Badge>
                        )}
                      </div>

                      {/* 우측 상단 액션 버튼들 */}
                      <div className="absolute top-3 right-3 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-x-2 group-hover:translate-x-0">
                        <Button variant="secondary" size="sm" className="bg-white/95 backdrop-blur-sm hover:bg-white text-gray-700 rounded-full w-9 h-9 p-0 shadow-lg hover:scale-110 transition-transform duration-200" onClick={(e) => e.preventDefault()}>
                          <Heart className="w-4 h-4" />
                        </Button>
                        <Button variant="secondary" size="sm" className="bg-white/95 backdrop-blur-sm hover:bg-white text-gray-700 rounded-full w-9 h-9 p-0 shadow-lg hover:scale-110 transition-transform duration-200" onClick={(e) => e.preventDefault()}>
                          <ArrowRight className="w-4 h-4" />
                        </Button>
                      </div>

                      {/* 하단 빠른 정보 (호버시 나타남) */}
                      <div className="absolute bottom-0 left-0 right-0 p-4 transform translate-y-full group-hover:translate-y-0 transition-transform duration-500">
                        <div className="bg-white/95 backdrop-blur-md rounded-xl p-3 shadow-xl">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <Users className="w-4 h-4 text-gray-600" />
                              <span className="text-sm font-medium">최대 {stay.capacity}명</span>
                            </div>
                            <div className="flex items-center gap-1">
                              <Star className="w-4 h-4 text-yellow-400 fill-current" />
                              <span className="text-sm font-bold">{stay.rating}</span>
                              <span className="text-xs text-gray-500">({stay.reviews})</span>
                            </div>
                          </div>
                          <div className="grid grid-cols-2 gap-2 text-xs text-gray-600">
                            {stay.amenities.slice(0, 4).map((amenity) => (
                              <div key={amenity} className="flex items-center">
                                <div className="w-1.5 h-1.5 bg-emerald-500 rounded-full mr-2"></div>
                                {amenity}
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <CardContent className="p-4 relative">
                      {/* 타입 배지 */}
                      <div className="flex items-center justify-between mb-3">
                        <Badge variant="outline" className="text-xs font-medium border-emerald-200 text-emerald-700 bg-emerald-50">
                          {stay.type}
                        </Badge>
                        {stay.badges.length > 0 && (
                          <Badge variant="secondary" className="text-xs bg-yellow-100 text-yellow-800 border-yellow-200">
                            {stay.badges[0]}
                          </Badge>
                        )}
                      </div>
                      
                      {/* 제목 */}
                      <h3 className="font-semibold text-gray-900 mb-2 line-clamp-1 group-hover:text-gray-700 transition-colors">
                        {stay.name}
                      </h3>
                      
                      {/* 위치 */}
                      <div className="flex items-center text-gray-600 mb-3 group-hover:text-gray-500 transition-colors">
                        <MapPin className="w-4 h-4 mr-1" />
                        <span className="text-sm">{stay.location}</span>
                      </div>

                      {/* 태그들 */}
                      <div className="flex flex-wrap gap-1 mb-4">
                        {stay.tags.slice(0, 3).map((tag) => (
                          <span key={tag} className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-600 px-2 py-1 rounded-full transition-colors">
                            {tag}
                          </span>
                        ))}
                      </div>
                      
                      {/* 가격 및 평점 */}
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-1">
                          <Star className="w-4 h-4 text-yellow-400 fill-current" />
                          <span className="text-sm font-semibold">{stay.rating}</span>
                          <span className="text-xs text-gray-500">({stay.reviews})</span>
                        </div>
                        <div className="text-right">
                          {stay.originalPrice && (
                            <div className="text-xs text-gray-400 line-through">
                              ₩{stay.originalPrice.toLocaleString()}
                            </div>
                          )}
                          <div className="text-lg font-bold text-gray-900 group-hover:text-emerald-600 transition-colors">
                            ₩{stay.price.toLocaleString()}
                          </div>
                          <div className="text-xs text-gray-500">/박</div>
                        </div>
                      </div>

                      {/* 호버시 나타나는 액션 바 */}
                      <div className="absolute inset-x-4 bottom-4 transform translate-y-full group-hover:translate-y-0 opacity-0 group-hover:opacity-100 transition-all duration-300">
                        <div className="bg-emerald-500 hover:bg-emerald-600 text-white text-center py-2 px-4 rounded-lg shadow-lg font-medium text-sm transition-colors">
                          지금 예약하기
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* 풀빌라 섹션 */}
      <section className="py-12 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
                <Waves className="w-7 h-7 text-blue-500" />
                풀빌라
              </h2>
              <p className="text-gray-600">프라이빗 풀이 있는 럭셔리 공간</p>
            </div>
            <Link href="/spaces" className="text-gray-500 hover:text-gray-900 flex items-center">
              더보기
              <ArrowRight className="w-4 h-4 ml-1" />
            </Link>
          </div>

          <div className="overflow-x-auto -mx-4 mobile-scroll">
            <div className="flex space-x-4 pb-4 pl-4" style={{ width: 'max-content', paddingRight: '40vw' }}>
              {featuredStays.slice(1, 5).map((stay) => (
                <Link key={stay.id} href={`/spaces/${stay.id}`} className="group block flex-shrink-0">
                  <Card className="overflow-hidden border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300 bg-white" 
                        style={{ width: '280px', minWidth: '280px' }}>
                    <div className="relative aspect-[4/3] overflow-hidden">
                      <img src={stay.image} alt={stay.name} className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500" />
                      {stay.isNew && (
                        <Badge className="absolute top-3 left-3 bg-green-500 text-white">NEW</Badge>
                      )}
                      <Button variant="secondary" size="sm" className="absolute top-3 right-3 bg-white/90 hover:bg-white text-gray-700 rounded-full w-8 h-8 p-0" onClick={(e) => e.preventDefault()}>
                        <Heart className="w-4 h-4" />
                      </Button>
                    </div>
                    <CardContent className="p-4">
                      <h3 className="font-medium text-gray-900 mb-2 line-clamp-1">{stay.name}</h3>
                      <div className="flex items-center text-gray-600 mb-3">
                        <MapPin className="w-4 h-4 mr-1" />
                        <span className="text-sm">{stay.location}</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-1">
                          <Star className="w-4 h-4 text-yellow-400 fill-current" />
                          <span className="text-sm font-medium">{stay.rating}</span>
                        </div>
                        <div className="text-right">
                          <div className="text-lg font-bold text-gray-900">₩{stay.price.toLocaleString()}</div>
                          <div className="text-xs text-gray-500">/박</div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* 독채형 섹션 */}
      <section className="py-12 bg-white">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
                <Home className="w-7 h-7 text-emerald-500" />
                독채형
              </h2>
              <p className="text-gray-600">온전한 프라이버시를 위한 독채 공간</p>
            </div>
            <Link href="/spaces" className="text-gray-500 hover:text-gray-900 flex items-center">
              더보기
              <ArrowRight className="w-4 h-4 ml-1" />
            </Link>
          </div>

          <div className="overflow-x-auto -mx-4 mobile-scroll">
            <div className="flex space-x-4 pb-4 pl-4" style={{ width: 'max-content', paddingRight: '40vw' }}>
              {featuredStays.slice(2, 6).map((stay) => (
                <Link key={stay.id} href={`/spaces/${stay.id}`} className="group block flex-shrink-0">
                  <Card className="overflow-hidden border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300 bg-white" 
                        style={{ width: '280px', minWidth: '280px' }}>
                    <div className="relative aspect-[4/3] overflow-hidden">
                      <img src={stay.image} alt={stay.name} className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500" />
                      {stay.isHot && (
                        <Badge className="absolute top-3 left-3 bg-red-500 text-white">HOT</Badge>
                      )}
                      <Button variant="secondary" size="sm" className="absolute top-3 right-3 bg-white/90 hover:bg-white text-gray-700 rounded-full w-8 h-8 p-0" onClick={(e) => e.preventDefault()}>
                        <Heart className="w-4 h-4" />
                      </Button>
                    </div>
                    <CardContent className="p-4">
                      <h3 className="font-medium text-gray-900 mb-2 line-clamp-1">{stay.name}</h3>
                      <div className="flex items-center text-gray-600 mb-3">
                        <MapPin className="w-4 h-4 mr-1" />
                        <span className="text-sm">{stay.location}</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-1">
                          <Star className="w-4 h-4 text-yellow-400 fill-current" />
                          <span className="text-sm font-medium">{stay.rating}</span>
                        </div>
                        <div className="text-right">
                          <div className="text-lg font-bold text-gray-900">₩{stay.price.toLocaleString()}</div>
                          <div className="text-xs text-gray-500">/박</div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* 더 많은 공간 탐색 섹션 */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">더 많은 특별한 공간들</h2>
          <p className="text-lg text-gray-600 mb-8">AI 기반 맞춤 추천으로 완벽한 공간을 발견하세요</p>
          <Button asChild className="bg-gray-900 hover:bg-gray-800 text-white px-8 py-3 text-lg font-medium">
            <Link href="/spaces">
              전체 숙소 둘러보기
              <ArrowRight className="w-5 h-5 ml-2" />
            </Link>
          </Button>
        </div>
      </section>

      {/* 푸터 */}
      <footer className="bg-gray-900 text-white py-16">

        <div className="container mx-auto px-4 relative">
          <div className="grid md:grid-cols-4 gap-12">
            {/* 브랜드 섹션 */}
            <div className="md:col-span-2">
              <div className="flex items-center mb-6">
                <div className="w-12 h-12 bg-gray-800 rounded flex items-center justify-center mr-4">
                  <span className="text-white font-bold text-xl">S</span>
                </div>
                <h3 className="text-2xl font-light tracking-tight">stay<span className="font-medium">oneday</span></h3>
              </div>
              <p className="text-gray-300 mb-6 text-lg leading-relaxed max-w-md">
                혁신적인 기술과 세심한 큐레이션으로<br />
                완벽한 하루를 선사하는 프리미엄 플랫폼
              </p>
              <div className="flex items-center gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-white">1,200+</div>
                  <div className="text-sm text-gray-400">검증된 공간</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-white">50+</div>
                  <div className="text-sm text-gray-400">도시</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-white">98%</div>
                  <div className="text-sm text-gray-400">만족도</div>
                </div>
              </div>
            </div>
            
            {/* 서비스 */}
            <div>
              <h4 className="font-bold mb-6 text-lg">서비스</h4>
              <ul className="space-y-3">
                {['공간 대여', '맞춤 추천', '즉시 예약', 'AI 매칭', '24시간 지원'].map((item) => (
                  <li key={item}>
                    <a href="#" className="text-gray-300 hover:text-white transition-colors flex items-center">
                      <ArrowRight className="w-3 h-3 mr-2" />
                      {item}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
            
            {/* 고객지원 */}
            <div>
              <h4 className="font-bold mb-6 text-lg">고객지원</h4>
              <ul className="space-y-3">
                {['FAQ', '1:1 상담', '이용가이드', '환불정책', '파트너십'].map((item) => (
                  <li key={item}>
                    <a href="#" className="text-gray-300 hover:text-white transition-colors flex items-center">
                      <ArrowRight className="w-3 h-3 mr-2" />
                      {item}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
          
          {/* 하단 정보 */}
          <div className="border-t border-gray-700 mt-12 pt-8 flex flex-col md:flex-row items-center justify-between">
            <div className="text-sm text-gray-400 mb-4 md:mb-0">
              © 2024 stayoneday. All rights reserved. | 사업자등록번호: 123-45-67890
            </div>
            <div className="flex items-center gap-6 text-sm text-gray-400">
              <a href="#" className="hover:text-white transition-colors">개인정보처리방침</a>
              <a href="#" className="hover:text-white transition-colors">이용약관</a>
              <a href="#" className="hover:text-white transition-colors">파트너 신청</a>
            </div>
          </div>
        </div>
      </footer>

      {/* 상세 검색 모달 */}
      {showSearchModal && (
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={() => setShowSearchModal(false)}
        >
          <div 
            className="bg-white rounded-2xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6">
              {/* 모달 헤더 */}
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">숙소 검색</h2>
                <Button 
                  variant="ghost" 
                  size="sm"
                  onClick={() => setShowSearchModal(false)}
                  className="rounded-full hover:bg-gray-100 w-8 h-8 p-0 text-gray-500 hover:text-gray-700"
                >
                  <X className="w-5 h-5" />
                </Button>
              </div>

              {/* 검색 폼 */}
              <div className="space-y-6">
                {/* 장소 입력 */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    어디로 여행가시나요?
                  </label>
                  <div className="relative">
                    <Input 
                      placeholder="지역, 숙소명 검색"
                      value={searchLocation}
                      onChange={(e) => setSearchLocation(e.target.value)}
                      className="pl-10 h-12 rounded-xl border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500"
                    />
                    <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  </div>
                  
                  {/* 추천 검색어 */}
                  <div className="mt-3 flex flex-wrap gap-2">
                    {suggestions.map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => setSearchLocation(suggestion)}
                        className="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full text-sm text-gray-700 transition-colors"
                      >
                        {suggestion}
                      </button>
                    ))}
                  </div>
                </div>

                {/* 날짜 선택 (당일 예약) */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    언제 이용하시나요?
                  </label>
                  <div className="relative">
                    <Input 
                      type="date"
                      value={selectedDate}
                      onChange={(e) => setSelectedDate(e.target.value)}
                      className="pl-10 h-12 rounded-xl border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500 [&::-webkit-calendar-picker-indicator]:cursor-pointer"
                      min={new Date().toISOString().split('T')[0]}
                      style={{
                        colorScheme: 'light'
                      }}
                    />
                    <CalendarDays className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  </div>
                  <p className="text-xs text-gray-500 mt-1">당일 이용 기준으로 월/일만 선택해주세요</p>
                  
                  {/* 선택된 날짜 표시 (연도 제외) */}
                  {selectedDate && (
                    <div className="mt-2 p-2 bg-blue-50 rounded-lg border border-blue-200">
                      <p className="text-sm text-blue-700">
                        선택된 날짜: {new Date(selectedDate).toLocaleDateString('ko-KR', { 
                          month: 'long', 
                          day: 'numeric',
                          weekday: 'short'
                        })}
                      </p>
                    </div>
                  )}
                </div>

                {/* 게스트 수 선택 */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    게스트
                  </label>
                  <div className="flex items-center justify-between p-4 border border-gray-300 rounded-xl">
                    <div className="flex items-center">
                      <Users className="w-5 h-5 text-gray-400 mr-3" />
                      <span className="text-gray-900">게스트 {guestCount}명</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={(e) => {
                          e.preventDefault()
                          setGuestCount(Math.max(2, guestCount - 1))
                        }}
                        className="rounded-full w-8 h-8 p-0 hover:bg-gray-100 border-gray-300"
                        disabled={guestCount <= 2}
                      >
                        -
                      </Button>
                      <span className="w-12 text-center font-medium text-lg">{guestCount}명</span>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={(e) => {
                          e.preventDefault()
                          setGuestCount(Math.min(20, guestCount + 1))
                        }}
                        className="rounded-full w-8 h-8 p-0 hover:bg-gray-100 border-gray-300"
                        disabled={guestCount >= 20}
                      >
                        +
                      </Button>
                    </div>
                  </div>
                </div>

                {/* 검색 버튼 */}
                <Button
                  className="w-full h-12 bg-red-500 hover:bg-red-600 text-white rounded-xl font-medium"
                  onClick={() => {
                    console.log('검색 실행:', { searchLocation, selectedDate, guestCount })
                    setShowSearchModal(false)
                    // 실제 검색 로직 구현 - /spaces 페이지로 이동하거나 결과 필터링
                  }}
                >
                  <Search className="w-5 h-5 mr-2" />
                  검색하기
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { createClient } from '@/lib/supabase/client'
import { Lock, User, Building, AlertTriangle } from 'lucide-react'

export default function HostLoginPage() {
  const router = useRouter()
  const supabase = createClient()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [loginForm, setLoginForm] = useState({
    email: '',
    password: ''
  })

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      // 데모용 호스트 계정들
      const hostAccounts = [
        { 
          email: 'host1@example.com', 
          password: 'host123!',
          name: '김호스트',
          business_name: '구공스테이',
          host_id: 'host-1'
        },
        { 
          email: 'host2@example.com', 
          password: 'host123!',
          name: '박호스트',
          business_name: '스테이도고',
          host_id: 'host-2'
        },
        { 
          email: 'host3@example.com', 
          password: 'host123!',
          name: '이호스트',
          business_name: '마담아네뜨',
          host_id: 'host-3'
        },
        // 관리자는 호스트로도 로그인 가능 (관리자 오버라이드)
        { 
          email: 'admin', 
          password: 'nuklabsstay90!!',
          name: '메인 관리자',
          business_name: 'Stay One Day 메인 관리자',
          host_id: 'admin-override',
          isAdmin: true
        }
      ]

      const validHost = hostAccounts.find(
        host => host.email === loginForm.email && host.password === loginForm.password
      )

      if (!validHost) {
        setError('호스트 계정이 아니거나 로그인 정보가 올바르지 않습니다.')
        return
      }

      // 세션에 호스트 정보 저장
      sessionStorage.setItem('hostUser', JSON.stringify({
        email: validHost.email,
        name: validHost.name,
        business_name: validHost.business_name,
        host_id: validHost.host_id,
        role: validHost.isAdmin ? 'admin' : 'host',
        isAdmin: validHost.isAdmin || false,
        loginTime: new Date().toISOString()
      }))

      // 호스트 대시보드로 이동
      router.push('/host')
      
    } catch (error) {
      console.error('로그인 오류:', error)
      setError('로그인 처리 중 오류가 발생했습니다.')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <div className="mx-auto h-16 w-16 bg-green-100 rounded-full flex items-center justify-center">
            <Building className="h-8 w-8 text-green-600" />
          </div>
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            Stay One Day 호스트 로그인
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            호스트 계정으로 로그인하세요
          </p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="text-center">호스트 인증</CardTitle>
          </CardHeader>
          <CardContent>
            {error && (
              <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                <div className="flex items-center">
                  <AlertTriangle className="h-4 w-4 mr-2" />
                  <span>{error}</span>
                </div>
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <Label htmlFor="email">호스트 이메일</Label>
                <div className="relative">
                  <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                  <Input
                    id="email"
                    type="email"
                    value={loginForm.email}
                    onChange={(e) => setLoginForm(prev => ({ ...prev, email: e.target.value }))}
                    placeholder="host@example.com"
                    className="pl-10"
                    required
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="password">비밀번호</Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                  <Input
                    id="password"
                    type="password"
                    value={loginForm.password}
                    onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}
                    placeholder="비밀번호를 입력하세요"
                    className="pl-10"
                    required
                  />
                </div>
              </div>

              <Button
                type="submit"
                className="w-full"
                disabled={loading}
              >
                {loading ? '로그인 중...' : '호스트 로그인'}
              </Button>
            </form>

          </CardContent>
        </Card>

        <div className="text-center">
          <Button 
            variant="ghost" 
            onClick={() => router.push('/')}
            className="text-sm text-gray-600"
          >
            ← 메인 페이지로 돌아가기
          </Button>
        </div>
      </div>
    </div>
  )
}